 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/bookings", type: :request do
  # Booking. As you add validations to Booking, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  #    {date: "2020-07-05", status: "Booked", sport: Sport.create!(code: 200, name: "Tennis"), 
  #    facility: Facility.create!(name: "Central Court", mode: "Outdoor", sport: (Sport.create!(code: 300, name: "Football"))),
  #    timeslot: Timeslot.create!(code: 15, weekday: 5, start_time: "2000-01-01 22:05:52", end_time: "2000-01-01 23:05:52"), 
  #    user: User.create!(email: "aaa@gmail.com", password: "ooooooooooo123", name: "Guilherme", telephone: "19997640987", numeroUSP: 9354323)}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes valid for your model")
    # {date: nil, status: nil, sport: nil, facility: nil, timeslot: nil, user: nil}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Booking.create! valid_attributes
      get bookings_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      booking = Booking.create! valid_attributes
      get booking_url(booking)
      expect(response).to be_successful
    end
  end

  #since we dont use the form anymore we wont test like this 
  # describe "GET /new" do
  #   it "renders a successful response" do
  #     get new_booking_url
  #     expect(response).to be_successful
  #   end
  # end

  describe "GET /edit" do
    it "render a successful response" do
      booking = Booking.create! valid_attributes
      get edit_booking_url(booking)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Booking" do
        expect {
          post bookings_url, params: { booking: valid_attributes }
        }.to change(Booking, :count).by(1)
      end

      it "redirects to the created booking" do
        post bookings_url, params: { booking: valid_attributes }
        expect(response).to redirect_to(booking_url(Booking.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Booking" do
        expect {
          post bookings_url, params: { booking: invalid_attributes }
        }.to change(Booking, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post bookings_url, params: { booking: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested booking" do
        booking = Booking.create! valid_attributes
        patch booking_url(booking), params: { booking: new_attributes }
        booking.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the booking" do
        booking = Booking.create! valid_attributes
        patch booking_url(booking), params: { booking: new_attributes }
        booking.reload
        expect(response).to redirect_to(booking_url(booking))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        booking = Booking.create! valid_attributes
        patch booking_url(booking), params: { booking: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested booking" do
      booking = Booking.create! valid_attributes
      expect {
        delete booking_url(booking)
      }.to change(Booking, :count).by(-1)
    end

    it "redirects to the bookings list" do
      booking = Booking.create! valid_attributes
      delete booking_url(booking)
      expect(response).to redirect_to(bookings_url)
    end
  end
end
